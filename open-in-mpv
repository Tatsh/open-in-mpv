#!/usr/bin/env python
from __future__ import print_function
from __future__ import unicode_literals
from os.path import expanduser, isdir, join as path_join
import json
import os
import struct
import subprocess as sp
import sys


def spawn(func):
    """See Stevens' "Advanced Programming in the UNIX Environment" for details
    (ISBN 0201563177)
    Credit: https://stackoverflow.com/a/6011298/374110

    Takes a callable which will be called in the fork.
    """
    try:
        pid = os.fork()
        if pid > 0:
            # parent process, return and keep running
            return
    except OSError as exc:
        print('Fork #1 failed: {} ({})'.format(exc.errno, exc.strerror))
        sys.exit(1)

    os.setsid()

    # do second fork
    try:
        pid = os.fork()
        if pid > 0:
            # exit from second parent
            sys.exit(0)
    except OSError as exc:
        print('Fork #2 failed: {} ({})'.format(exc.errno, exc.strerror))
        sys.exit(1)

    func()

    os._exit(os.EX_OK)


def main():
    py3 = sys.version_info.major == 3
    data_path = expanduser('~/.local/share/open-in-mpv')
    try:
        os.makedirs(data_path)
    except OSError:
        pass
    out_log_path = path_join(data_path, 'native.log')
    log = open(out_log_path, 'a+')
    stdin_buffer = sys.stdin
    if py3:
        stdin_buffer = sys.stdin.buffer
    req_len = struct.unpack('@i', stdin_buffer.read(4))[0]
    print('Message length: {}'.format(req_len), file=log)
    message = json.loads(stdin_buffer.read(req_len))
    print('Message contents: '.format(message), file=log)

    try:
        url = message['url']
    except KeyError:
        print(json.dumps({'message': 'Missing URL!'}))
        print('Did not get a URL', file=log)
        return 1

    # MacPorts
    new_env = os.environ.copy()
    data_resp = {'log_path': out_log_path,
                 'py3': py3,
                 'message': 'About to spawn'}
    if isdir('/opt/local/bin'):
        print('Detected MacPorts. Setting PATH.', file=log)
        data_resp['macports'] = True
        try:
            old_path = os.environ['PATH']
            new_env['PATH'] = '/opt/local/bin:{}'.format(old_path)
        except KeyError:
            new_env['PATH'] = '/opt/local/bin'
    data_resp['env'] = new_env

    print('About to spawn', file=log)
    resp = json.dumps(data_resp)
    size = struct.pack('@i', len(resp))
    stdout_buffer = sys.stdout
    if py3:
        stdout_buffer = sys.stdout.buffer
        resp = resp.encode('utf-8')
        size = struct.pack('@i', len(size))
    stdout_buffer.write(size)
    stdout_buffer.write(resp)

    try:
        spawn(lambda: sp.check_call(['mpv', '--quiet', url], env=new_env, stdout=log, stderr=log))
    except Exception as exc:
        print(exc, file=log)
        return 1
    print('mpv should open soon', file=log)
    print('Exiting with status 0', file=log)
    log.close()

    return 0


if __name__ == '__main__':
    sys.exit(main())
