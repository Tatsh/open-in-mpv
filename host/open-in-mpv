#!/usr/bin/env python

# This file is part of open-in-mpv.
#
# Copyright 2020 Andrew Udvare
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from __future__ import print_function, unicode_literals

from os.path import dirname, exists, expanduser, isdir, join as path_join
import json
import logging
import os
import platform
import socket
import struct
import subprocess as sp
import sys

try:
    from typing import Any, BinaryIO, Callable, Dict, Mapping, TextIO, Union, cast
except ImportError:
    cast = lambda y, x: x

if platform.mac_ver()[0]:
    MPV_SOCKET = expanduser('~/Library/Caches/open-in-mpv.sock')
    DATA_PATH = expanduser('~/Library/Application Support/open-in-mpv')
else:
    MPV_SOCKET = expanduser('~/.cache/open-in-mpv.sock')
    DATA_PATH = expanduser('~/.local/share/open-in-mpv')
LOG = logging.getLogger('open-in-mpv')
PY3 = sys.version_info.major == 3


def spawn(func):
    # type: (Callable[[], Any]) -> None
    """See Stevens' "Advanced Programming in the UNIX Environment" for details
    (ISBN 0201563177)
    Credit: https://stackoverflow.com/a/6011298/374110

    Takes a callable which will be called in the fork.
    """
    try:
        pid = os.fork()
        if pid > 0:
            # parent process, return and keep running
            return
    except OSError as exc:
        LOG.exception('Fork #1 failed: %s (%s)', exc.errno, exc.strerror)
        sys.exit(1)

    os.setsid()
    # do second fork
    LOG.debug('Second fork')
    try:
        pid = os.fork()
        if pid > 0:
            # exit from second parent
            sys.exit(0)
    except OSError as exc:
        LOG.exception('Fork #2 failed: %s (%s)', exc.errno, exc.strerror)
        sys.exit(1)
    # Call the callback
    LOG.debug('Calling callback')
    func()
    LOG.debug('Callback returned')
    # Exit without calling cleanup handlers
    os._exit(os.EX_OK)  # pylint: disable=protected-access


def mpv_and_cleanup(url, new_env, log):
    # type: (str, Mapping[str, str], Union[BinaryIO, TextIO]) -> Callable[[], None]
    def cb():
        # type: () -> None
        sp.check_call([
            'mpv', '--quiet', '--player-operation-mode=pseudo-gui',
            '--input-ipc-server={}'.format(MPV_SOCKET), url
        ],
                      env=new_env,
                      stdout=log,
                      stderr=log)
        os.remove(MPV_SOCKET)

    return cb


def spawn_init(url, log, new_env):
    # type: (str, Union[BinaryIO, TextIO], Mapping[str, str]) -> None
    LOG.debug('Spawning initial instance')
    spawn(mpv_and_cleanup(url, new_env, log))


def get_cb(url, log, new_env):
    # type: (str, Union[BinaryIO, TextIO], Mapping[str, str]) -> Callable[[], None]
    def cb():
        # type: () -> None
        LOG.debug('Sending loadfile command')
        s = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        s.settimeout(2)
        try:
            s.connect(MPV_SOCKET)
            s.settimeout(None)
            LOG.debug('Connected to socket')
            s.send(
                json.dumps({
                    'command': ['loadfile', url]
                }).encode('utf-8', 'strict') + b'\n')
        except socket.error:
            LOG.exception('Connection refused')
            try:
                os.remove(MPV_SOCKET)
            except OSError:
                pass
            spawn_init(url, log, new_env)

    return cb


def main():
    # type: () -> int
    try:
        os.makedirs(DATA_PATH)
        os.makedirs(dirname(MPV_SOCKET))
    except OSError:
        pass

    out_log_path = path_join(DATA_PATH, 'native.log')  # type: str
    log = open(out_log_path, 'a+')
    LOG.setLevel(logging.ERROR)
    LOG.addHandler(logging.StreamHandler(log))

    stdin_buffer = sys.stdin  # type: Union[BinaryIO, TextIO]
    if PY3:
        stdin_buffer = sys.stdin.buffer  # pylint: disable=no-member
    req_len = struct.unpack('@i', stdin_buffer.read(4))[0]  # type: int
    message = json.loads(stdin_buffer.read(
        req_len).decode())  # type: Dict[str, Union[str, bool]]

    LOG.debug('Message contents (%d): %s', req_len, message)

    if 'init' in message:
        resp = json.dumps({
            'dataPath': DATA_PATH,
            'socketPath': MPV_SOCKET,
        })  # type: Union[str, bytes]
        size = struct.pack('@i', len(resp))
        stdout_buffer = sys.stdout  # type: Union[BinaryIO, TextIO]
        if PY3:
            stdout_buffer = sys.stdout.buffer  # pylint: disable=no-member
            resp = cast(str, resp).encode('utf-8')
            size = struct.pack('@i', len(resp))
        stdout_buffer.write(size)
        stdout_buffer.write(resp)
        log.close()

        return 0

    try:
        url = cast(str, message['url'])  # type: str
    except KeyError:
        LOG.exception('No URL was given')
        print(json.dumps({'message': 'Missing URL!'}))
        return 1

    if message.get('debug', False):
        log.write('Debug mode enabled.\n')
        LOG.setLevel(logging.DEBUG)
    single = cast(bool, message.get('single', True))  # type: bool

    # MacPorts
    new_env = os.environ.copy()
    data_resp = {
        'log_path': out_log_path,
        'py3': PY3,
        'message': 'About to spawn'
    }  # type: Dict[str, Union[str, bool, Dict[str, str]]]
    if isdir('/opt/local/bin'):
        print('Detected MacPorts. Setting PATH.', file=log)
        data_resp['macports'] = True
        old_path = os.environ.get('PATH')
        new_env['PATH'] = '/opt/local/bin' if not old_path else ':'.join(
            ('/opt/local/bin', old_path))
    data_resp['env'] = new_env

    LOG.debug('About to spawn')
    resp = json.dumps(data_resp)
    size = struct.pack('@i', len(resp))
    stdout_buffer = sys.stdout
    if PY3:
        stdout_buffer = sys.stdout.buffer  # pylint: disable=no-member
        resp = resp.encode('utf-8')
        size = struct.pack('@i', len(size))
    stdout_buffer.write(size)
    stdout_buffer.write(resp)

    if exists(MPV_SOCKET) and single:
        spawn(get_cb(url, log, new_env))
    else:
        spawn_init(url, log, new_env)

    LOG.debug('mpv should open soon')
    LOG.debug('Exiting with status 0')
    log.close()

    return 0


if __name__ == '__main__':
    sys.exit(main())
